<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="dongduk.cs.ssd.dao.mybatis.mapper.UserMapper">
  <cache />
  
  <select id="getUser" resultType="User">
    SELECT USERID, EMAIL, PASSWD, USERNAME, NICKNAME, ADDRESS1, ADDRESS2, ADDRESS3, PHONE, REFUNDBANK, REFUNDACCOUNT
    FROM USERS 
    WHERE EMAIL = #{param1}
      AND PASSWD = #{param2}
  </select> 
  
  <select id="getUserByEmail" resultType="User">
  	SELECT USERID, EMAIL, PASSWD, USERNAME, NICKNAME, ADDRESS1, ADDRESS2, ADDRESS3, PHONE, REFUNDBANK, REFUNDACCOUNT
    FROM USERS 
    WHERE EMAIL = #{param1}
  </select>
  
  <select id="getUserByUserId" resultType="User">
  	SELECT USERID, EMAIL, PASSWD, USERNAME, NICKNAME, ADDRESS1, ADDRESS2, ADDRESS3, PHONE, REFUNDBANK, REFUNDACCOUNT
    FROM USERS 
    WHERE USERID = #{param1}
  </select>
  
  <insert id="createUser" parameterType="User">
  	INSERT INTO USERS 
  	(USERID, EMAIL, PASSWD, USERNAME, NICKNAME, ADDRESS1, ADDRESS2, ADDRESS3, PHONE, REFUNDBANK, REFUNDACCOUNT)
  	VALUES 
  	(USERID_SEQ.nextval, #{email}, #{password}, #{userName}, #{nickname}, 
  	#{address1, jdbcType=VARCHAR}, #{address2, jdbcType=VARCHAR}, #{address3, jdbcType=VARCHAR}, #{phone, jdbcType=VARCHAR}, 
  	#{refundBank, jdbcType=VARCHAR}, #{refundAccount, jdbcType=VARCHAR}) 
  </insert>
  
  <update id="updateUser" parameterType="User">
  	UPDATE USERS SET
  		PASSWD = #{password},
  		NICKNAME = #{nickname},
  		ADDRESS1 = #{address1},
  		ADDRESS2 = #{address2},
  		ADDRESS3 = #{address3},
  		PHONE = #{phone},
  		REFUNDBANK = #{refundBank},
  		REFUNDACCOUNT = #{refundAccount}
  	WHERE USERID = #{userId}
  </update>
  
  <delete id="deleteUser" parameterType="Integer">
  	DELETE FROM USERS 
  	WHERE USERID = #{userId}
  </delete>
  
<!--   <select id="getOrderList" parameterType="int"
  		resultType="Order">
  	SELECT orderId, cardBank, cardNo, validDate, cvc,
  		address1, address2, address3, phone, refundBank, 
  		refundAccount, totalPrice, orderDate, userId
  	FROM orders
  	WHERE userId = #{userId}
  </select> -->

	<select id="getAuctionOrderList" resultType="Order">
		SELECT s.auctionId, o.orderId, o.orderDate, o.totalPrice
		FROM orders o, successBidders s
		WHERE o.orderId = s.orderId and o.userId = #{param1}
	</select>

	<select id="getGroupBuyOrderList" resultType="Order">
		SELECT DISTINCT l.groupBuyId, o.orderId, o.orderDate, o.totalPrice
		FROM orders o, lineGroupBuys l
		WHERE o.orderId = l.orderId and o.userId= #{param1}
	</select>

  <select id="getGroupBuyList" parameterType="int"
  		resultType="GroupBuy">
  	SELECT groupBuyId, title, img, uploadDate, userId, menuId <!-- TO_CHAR(uploadDate, 'YYYY-MM-DD HH24:MI:SS') -->
  	FROM groupBuys
  	WHERE userId = #{userId}
  </select> <!-- user가 등록한 GroupBuyList를 가져옴 for 마이페이지 공동구매 등록 목록 보기 -->
  
    <select id="getAuctionList" parameterType="int"
  		resultType="Auction">
  	SELECT auctionId, title, img, uploadDate, userId, menuId
  	FROM auctions
  	WHERE userId = #{userId}
  </select> <!-- user가 등록한 AuctionList를 가져옴 for 마이페이지 경매 등록 목록 보기 -->
  
</mapper>